programming paradigms in javascript

JavaScript is a multi paradigm programming language

Recently a friend of mine who has been learning programming and came to me with a question regarding implementing a game of TicTacToe in JavaScript for an online course. While the question was related to some confusing behavior involving nested associated arrays, it made me think about how I would best approach structuring a simple game without the aid of the frameworks I usually use with JavaScript.

In this post I experiment implementing a game using Functional and Object Orientated programming and compared the difficulties/advantages I expierenced when writing in both styles. While I wasn't fully satisfied with either implementation I do feel like I learnt a bit more around working with vanilla JavaScript as well as some limitations which may clash with the language design.

The first version of the game I implemented was the object oriented style. I immediately created several classes for objects in the game. A player class which stored some information about who controlled the player and which piece 'X' or 'O' they had, A board class which stored the 9 cells of the game and a Square class which stored whether it had been Naughted or Crossed as well as handling some interaction. I then wrapped the core logic of the game in a Game class (this handled the various phases of the game).

Some initial difficulties I ran into when implementing the game this way was determining how to handle player interaction. As JavaScript interactions are typically handled via an asyncronous function which is triggered by the runtime when a user action occurs, I had trouble reconciling this with the game loop I wanted to implement. I ended up attaching event handlers on each of the squares and letting the Square object handle the click, this then notified the board object and the board buffered the input in the lastClicked field. While I wasn't satisfied this was the neatest way to handle inputs I also felt that letting the object which was being clicked handle the response was the right way to go. If I were to refactor the code I would probably create some kind of buffering system which attached certain actions to a buffer handled by the player object rather than the board. Fortunately tictactoe is a simple game and only one action can be done at a time.

As I was forcing a game loop style the means of iterating this loop had to be done with a setTimeout which either repeated the input check or continued on to the next turn of the game. This also felt like it wasn't suited to JavaScript's typical execution model as what would be a thread.sleep turns into a recursive asyncronous method call.

I felt the separation of concerns programming in an object oriented style made reasoning about parts of the code quite easy, though I have predominantly used C# so that could be put down to familiarity. One thing that was frustrating and may have been due to over abstraction was the amount of boiler plate constructors and function declarations I ended up writing - while this may have been avoidable if I had forgone best practices and just accessed objects 3 layers deep I felt that to program 